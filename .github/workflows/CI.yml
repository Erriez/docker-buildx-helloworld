name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  - push
  - pull_request

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# Global environment variables
env:
  - DOCKER_ORG: erriez
  - IMAGE_VERSION: latest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:    
  setup:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # Cache docker layers
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Setup QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm/v7,linux/arm64
      
      # Setup buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # Print versions
      - name: Print versions
        run: |
          docker --version
          docker buildx version

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      # Build Docker images
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: hello
          file: Dockerfile
          push: false
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      

  # build-all:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - setup
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Build images all targets
  #       shell: bash
  #       run: |
  #         echo "Building for ALL_PLATFORMS=${{ env.ALL_PLATFORMS }}"
  #         docker buildx create --use --name mybuild
  #         docker buildx bake -f build/build.hcl --set *.platform=${{ env.ALL_PLATFORMS }} #--progress plain

  # build-local:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - setup
  #   steps:
  #     - name: Build images current targets
  #       shell: bash
  #       run: |
  #         docker buildx bake -f build/build.hcl --load
  #         docker images

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Test Hello World images
        shell: bash
        # env:
        #   DOCKER_ORG: ${{ secrets.DOCKER_ORG }}
        #   IMAGE_VERSION: latest
        run: |
          echo "Running test job!"
          echo "Testing ${DOCKER_ORG}/hello:${IMAGE_VERSION}"
          docker images
          docker run --rm ${DOCKER_ORG}/hello:${IMAGE_VERSION}

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Deploy Hello World images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Todo deploy images to registry"
          echo "My username: $DOCKER_USERNAME"
          echo "My password: $DOCKER_PASSWORD"
